Those are some tips I have stumbled upon. This list will change and items will
be removed, so check the repository log for more.


<C-X><C-L>    : Line complete SUPER USEFUL. see :help ins-completion for more
about the Ctrl-X mode.
:h slash<C-D><Tab> : type control-D and get a list all help topics containing
slash (plus use TAB for Help completion)
:h i_CTRL-R  : help for <C-R> in insert mode
:h c_CTRL-R  : help for <C-R> in command mode
:h v_CTRL-V  : visual mode
:h 'ai       : help on setting option 'autoindent'
:helpgrep x  : grep help for x, then use quickfix commands

quickfix commands - navigate quickfix list:
:cc [#]      : display result #nr or last result
:cnext       : next, prev result, next file, prev file
:cprev
:cnfile
:cpfile

location list commands - a different list independent of the quickfix list:
:ll [#]
:lnext
:lprev
:lnfile
:lcfile

See also the quickfixsigns plugin, which shows mark names and quickfix
locations in the left margin.



:Ex     : file explorer, note capital E
\be     : show buffer explorer (requires plugin)
:ls     : list of buffers
i_CTRL-R=5*5  : insert 25 into text
guu     : lowercase line
gUU     : uppercase line
~       : invert case (upper->lower; lower->upper) of current character
gf      : open file name under cursor (SUPER)
'.       : jump to last modification line (SUPER)
`.       : jump to exact spot in last modification line
:ju(mps) : list of your movements {{help|jump-motions}}
:history : list of all your commands
:reg     : display contents of all registers
:r!ls                 : reads in output of ls (use dir on Windows)
!1} sort             : sorts paragraph; this is issued from normal mode!)
:bn           : next buffer
:bp           : previous buffer
:brew         : rewind to first buffer in buffer list
:tabe         : open new tab page (Ctrl-PgUp, Ctrl-PgDown for next/previous tab)
:tabm n       : move tab to position n (0=leftmost position)
:args         : display argument list
:sav module.py : Save current file as module.py and "move" to module.py
:help :Nread  : use ftp/scp to edit remote files in Vim
gv            : restores last visual range

Between lines with marks a and b (inclusive), append each line starting with
"Error" to a file:
:'a,'b g/^Error/ .w >> errors.txt

gq            : formats the selected range
ls | vim -   : edit a PIPE!

Pulling objects onto command/search line (SUPER)

CTRL-R CTRL-W   : pull word under the cursor into a command line or search
CTRL-R CTRL-A   : pull whole word including punctuation
CTRL-R -        : pull small register
CTRL-R [0-9a-z] : pull named registers
CTRL-R %        : pull file name (also # for alternative file name)
<C-X><C-F> :insert name of a file in current directory

<c-r>:          : pull in last command line command
<c-r>/          : pull in last search command

/\C                : make your search case-sensitive
/<!--\_p\{-}-->    : search for multiple line comments
:%s/FILE/\=expand("%:t") : substitute any word (say FILE) by actual filename


check out the taglist plugin - navigate source code structure:
http://www.vim.org/scripts/script.php?script_id=273
#make sure to use pathogen for installing scripts:
#http://www.vim.org/scripts/script.php?script_id=2332
^^ no, use the much better vam instead!! it's included in this vimrc:
http://www.vim.org/scripts/script.php?script_id=2905
to use a terminal inside vim windows:
http://code.google.com/p/conque/wiki/Usage
or as an alternative:
http://www.wana.at/vimshell/


:set dictionary=/usr/share/dict/words
ctrl-x ctrl-k     - dictionary completion

ctrl-w      - erases word (insert mode...
ctrl-u      - erases line  ...or on command line)

g*              - search for partial word under cursor 
                  (repeat with n)
[I              - show lines with matching word under cursor

 d'k     - delete from current position to mark k
 'a-z    - marks in the same file
 'A-Z    - marks shared beteween files

ctrl-t, ctrl-d  - indent current line forward, backwards 
                  (insert mode)

:set pastetoggle=<f5>

    V=  - select text, then reformat with =
    =   - will correct alignment of code
    ==  - one line; 
    gq  - reformat paragraph
    :help equalprg - external program for =.


select block, then :fold
zo - open
zc - close
See :help foldmethod for options, and use :mkview and :loadview to save and
restore the current window. 

 ctrl-w ctrl-w    - move cursor to another window (cycle)

 :hide            - close current window
 :only            - keep only this window open
 :ls              - show current buffers
 :b 2             - open buffer #2 in this window


 :tag TAB            - list the known tags
 :tag function_name  - jump to that function
 ctrl-t   - goes to previous spot where you called :tag
 ctrl-]   - calls :tag on the word under the cursor        
 :ptag    - open tag in preview window (also ctrl-w })
 :pclose  - close preview window


 :map <f9> :make    - map the F9 key to run make
 :set makeprg       - change what :make does
 :copen    - open a mini-window with list of errors
           - hit enter on an error to jump to line 
              :cclose   - closes the mini-window
 :cw       - toggles the mini-window (if errors exist)


 vmap <buffer> ;bo "zdi<B><c-r>z</B><esc> - puts bold html tags around
something you have visually selected. 


nnoremap <F6> <C-W>w              - ???
nnoremap <S-F6> <C-W>W            - ???
map <C-L> :noh<CR>:redraw!<CR>    - ???


 :reg     - show named registers and what's in them
 qk       - records edits into register k 
            (q again to stop recording)
 @k       - execute recorded edits (macro)
 @@       - repeat last one
 5@@      - repeat 5 times
 "kp      - print macro k 
            (e.g., to edit or add to .vimrc)
 "kd      - replace register k with what cursor is on



yanking, deleting, and pasting windows around to rearrange them:
http://www.gregsexton.org/2011/04/enhancing-window-movement-and-positioning-in-vim/
-----------
motions:

w - word
s - sentence
p - paragraph
" - double-quoted string
' - single-quoted string
` - back-quoted string
) - parenthesized block
] - bracketed block
} - brace block
t - contents of an xml tag
> - definition of an xml tag (what is between < and >)
i - indent-level block (ai gets one line before the indent level starts, eg if)

for more info on motions (plugins for camel case motions and function arg
motions) see this page:
http://blog.carbonfive.com/2011/10/17/vim-text-objects-the-definitive-guide/

see http://vimgolf.com/ for lots of tips & tricks
